#!/usr/bin/env python3
"""
Analysis DataStore Implementations

DataStore implementations for financial analysis domain data management.
"""

from datetime import datetime
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from finances.core.flow import NodeDataSummary


class CashFlowResultsStore:
    """
    DataStore for cash flow analysis results.

    Manages PNG chart files and analysis dashboards generated from
    YNAB transaction data.
    """

    def __init__(self, charts_dir: Path):
        """
        Initialize cash flow results store.

        Args:
            charts_dir: Directory containing chart files (data/cash_flow/charts)
        """
        self.charts_dir = charts_dir

    def exists(self) -> bool:
        """Check if cash flow charts exist."""
        if not self.charts_dir.exists():
            return False
        return len(list(self.charts_dir.glob("*.png"))) > 0

    def load(self) -> list[Path]:
        """
        Load list of chart file paths.

        Returns:
            List of paths to PNG chart files

        Raises:
            FileNotFoundError: If charts directory doesn't exist or has no charts
        """
        if not self.charts_dir.exists():
            raise FileNotFoundError(f"Cash flow charts directory not found: {self.charts_dir}")

        chart_files = list(self.charts_dir.glob("*.png"))
        if not chart_files:
            raise FileNotFoundError(f"No cash flow charts found in {self.charts_dir}")

        return chart_files

    def save(self, data: list[Path]) -> None:
        """
        Save operation not applicable for chart tracking.

        Cash flow charts are generated by CashFlowAnalyzer,
        not directly saved through DataStore.

        Raises:
            NotImplementedError: Always
        """
        raise NotImplementedError("Cash flow charts are generated externally (CashFlowAnalyzer)")

    def last_modified(self) -> datetime | None:
        """Get timestamp of most recently modified chart file."""
        if not self.exists():
            return None

        chart_files = list(self.charts_dir.glob("*.png"))
        latest_file = max(chart_files, key=lambda p: p.stat().st_mtime)
        return datetime.fromtimestamp(latest_file.stat().st_mtime)

    def age_days(self) -> int | None:
        """Get age in days of most recent chart file."""
        last_mod = self.last_modified()
        if last_mod is None:
            return None
        return (datetime.now() - last_mod).days

    def item_count(self) -> int | None:
        """Get count of chart files."""
        if not self.exists():
            return None
        return len(list(self.charts_dir.glob("*.png")))

    def size_bytes(self) -> int | None:
        """Get total size of all chart files."""
        if not self.exists():
            return None
        chart_files = list(self.charts_dir.glob("*.png"))
        return sum(f.stat().st_size for f in chart_files)

    def summary_text(self) -> str:
        """Get human-readable summary."""
        count = self.item_count()
        if count is None:
            return "No cash flow charts found"
        return f"Cash flow charts: {count} files"

    def to_node_data_summary(self) -> "NodeDataSummary":
        """Convert to NodeDataSummary for FlowNode integration."""
        from finances.core.flow import NodeDataSummary

        return NodeDataSummary(
            exists=self.exists(),
            last_updated=self.last_modified(),
            age_days=self.age_days(),
            item_count=self.item_count(),
            size_bytes=self.size_bytes(),
            summary_text=self.summary_text(),
        )
