[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "finances"
version = "0.2.0"
description = "Professional personal finance management system with automated transaction matching"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Karl Davis", email = "karl@justdavis.com"},
]
keywords = ["finance", "ynab", "amazon", "apple", "transaction-matching"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Accounting",
]

dependencies = [
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "scipy>=1.11.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "python-dotenv>=1.0.0",
    "PyYAML>=6.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "ipython>=8.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "types-PyYAML>=6.0.0",
    "types-beautifulsoup4>=4.12.0",
    "pandas-stubs>=2.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-click>=0.8.0",
]

[project.scripts]
finances = "finances.cli.main:main"

[project.urls]
Homepage = "https://github.com/karlmdavis/justdavis-finances"
Repository = "https://github.com/karlmdavis/justdavis-finances"
Issues = "https://github.com/karlmdavis/justdavis-finances/issues"

# Package configuration
[tool.hatch.build.targets.wheel]
packages = ["src/finances"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "README.md",
    "LICENSE",
]

# Development tool configuration
[dependency-groups]
dev = [
    "ipython>=8.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "types-PyYAML>=6.0.0",
    "types-beautifulsoup4>=4.12.0",
    "pandas-stubs>=2.0.0",
]

# Black configuration
[tool.black]
line-length = 110
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 110
extend-exclude = [
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "S",    # flake8-bandit (security)
    "PERF", # perflint (performance)
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "E722",  # bare except - used sparingly for validation functions
    "S101",  # allow assert statements (tests use them)
    "S108",  # hardcoded /tmp usage - safe for test environments
    "UP007", # X | Y syntax - requires Python 3.10+, keeping Optional for 3.9 compat
    "PERF203",  # try-except in loop - acceptable for robustness in some cases
]

[tool.ruff.lint.pyupgrade]
# Keep runtime typing (Optional, Union) for Python 3.9 compatibility
# even when __future__ annotations are present
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]  # allow assert statements in tests
"src/finances/cli/main.py" = ["E402"]  # imports after setup code for CLI initialization

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "matplotlib.*",
    "scipy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for complete workflows",
    "currency: Tests for currency handling and precision",
    "amazon: Tests for Amazon transaction matching",
    "apple: Tests for Apple receipt processing",
    "ynab: Tests for YNAB integration",
    "slow: Tests that take significant time to run",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
fail_under = 60
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
